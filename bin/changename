#! /bin/bash

#
# Changes the name of a Terminal window.
#

ALIAS_FILE="$HOME/.changename_aliases"

#
# Shows changename man page.
#
function help
{
    man changename
    exit 1
}

#
# Echos text to strerr.
#
# $1: the text to echo
#
function error
{
    echo -e "$1" >&2
    exit 1
}

#
# Set the name of the current terminal window.
#
# $1: the name
#
function name
{
    # change the name of the current window
    echo -n -e "\033]0;$1\007"
    exit 0
}

#
# Determines if an alias already exists among a set of definitions.
#
# $1: alias name
# $2: alias directory path
# $3: the list of alias definitinos
#
function alias_exists
{
    local alias_name="$1"
    local directory_path="$2"
    local alias_definitions=(${@:3})

    local alias_definition=
    for alias_definition in "${alias_definitions[@]}"; do
        alias_definition=(${alias_definition/=/ })
        if [[ "$alias_name" == "${alias_definition[0]}" ]] || [[ "$directory_path" == "${alias_definition[1]}" ]] ; then
            return 0
        fi
    done

    return 1
}

#
# Prints the list of existing aliases.
#
function print_aliases
{
    if [[ -e "$ALIAS_FILE" ]]; then
        cat "$ALIAS_FILE"
    fi
}

#
# Create a directory alias.
#
# $1: the alias
# $2: (optional) the directory to alias. If not specified, the current directory is used.
#
function create_alias
{
    alias_to_create="$1"
    alias_directory="${2:-$PWD}"

    if [[ -z "$alias_to_create" ]]; then
        error "usage: changename alias <name> [<directory>]"
    fi

    if [[ ! -e "$ALIAS_FILE" ]]; then
        touch "$ALIAS_FILE"
    fi

    # load existing aliases
    existing_alias_definitions=$(cat "$ALIAS_FILE")
    IFS=$'\n' read -rd '' -a existing_alias_definitions <<< "$existing_alias_definitions"

    if alias_exists "$alias_to_create" "$alias_directory" "${existing_alias_definitions[@]}"; then
        error "error: alias already in use or directory already aliased"
    else
        echo "$alias_to_create=$alias_directory" >> "$ALIAS_FILE"
    fi
}

new_name="$1"
while getopts ":rhd-:" opt; do
    case $opt in
        -)
            case "${OPTARG}" in
                directory)  new_name="${PWD##*/}";;
                reset)      new_name="";;
                help)       help;;
                *)          error "Unimplemented option --${OPTARG}";;
            esac
            ;;
        d)  new_name="${PWD##*/}";;
        h)  help;;
        r)  new_name="";;
        \?) error "Invalid option: -$OPTARG";;
        :)  error "Option -$OPTARG requires an argument.";;
        *)  error "Unimplemented option: -$OPTARG";;
    esac
done
OPTIND=1

if [[ "$1" =~ ^alias$ ]]; then
    create_alias "${@:2}"
elif [[ "$1" =~ ^aliases$ ]]; then
    print_aliases
else
    name "$new_name"
fi
