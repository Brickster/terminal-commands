#! /bin/bash

#
# Changes the name of a Terminal window.
#

ALIAS_FILE="$HOME/.changename_aliases"

#
# Shows changename man page.
#
function help
{
    man changename
    exit 1
}

#
# Echos text to strerr.
#
# $1: the text to echo
#
function error
{
    echo -e "$1" >&2
    exit 1
}

#
# Set the name of the current terminal window.
#
# $1: the name
#
function name
{
    # change the name of the current window
    echo -n -e "\033]0;$1\007"
    exit 0
}

#
# Determines if an alias already exists among a set of definitions.
#
# $1: alias name
# $2: alias directory path
#
function alias_exists
{
    local alias_name="$1"
    local directory_path="$2"

    # load existing aliases
    alias_definitions=$(cat "$ALIAS_FILE")
    IFS=$'\n' read -rd '' -a alias_definitions <<< "$alias_definitions"

    local alias_definition=
    for alias_definition in "${alias_definitions[@]}"; do

        regex="^$alias_name=.*$"
        if [[ "$alias_definition" =~ $regex ]]; then
            return 0
        fi

        regex="^.*=$directory_path$"
        if [[ "$alias_definition" =~ $regex ]]; then
            return 0
        fi

    done

    return 1
}

#
# Prints the matching value of an alias definition by alias name or directory.
#
# $1: the search term
#
function get_alias
{
    local search="$1"

    # get existing aliases
    local aliases=$(cat "$ALIAS_FILE")
    IFS=$'\n' read -rd '' -a aliases <<< "$aliases"

    local alias_definition=
    for alias_definition in "${aliases[@]}"; do
        regex="^$search=(.*)$"
        if [[ "$alias_definition" =~ $regex ]]; then
            echo "${BASH_REMATCH[1]}"
            return 0
        fi
        regex="^(.*)=$search/?$"
        if [[ "$alias_definition" =~ $regex ]]; then
            echo "${BASH_REMATCH[1]}"
            return 0
        fi
    done
}

#
# Prints the list of existing aliases.
#
function print_aliases
{
    if [[ -e "$ALIAS_FILE" ]]; then
        cat "$ALIAS_FILE"
    fi
}

#
# Create a directory alias.
#
# $1: the alias
# $2: (optional) the directory to alias. If not specified, the current directory is used.
#
function create_alias
{
    alias_to_create="$1"
    alias_directory="${2:-$PWD}"

    if [[ -z "$alias_to_create" ]]; then
        error "usage: changename alias <name> [<directory>]"
    fi

    if [[ ! -e "$ALIAS_FILE" ]]; then
        touch "$ALIAS_FILE"
    fi

    if alias_exists "$alias_to_create" "$alias_directory"; then
        error "error: alias already in use or directory already aliased"
    else
        echo "$alias_to_create=$alias_directory" >> "$ALIAS_FILE"
    fi
}

#
# Rename an alias.
#
# $1: the alias to rename
# $2: the new alias name
#
function rename_alias
{
    from_alias="$1"
    to_alias="$2"

    if [[ -z "$from_alias" ]] || [[  -z "$to_alias" ]]; then
        error "usage: changename alias (-r|--rename) <from> <to>"
    fi

    # check that the source name exists
    directory=$(changename alias --get "$from_alias")
    if [[ -z "$directory" ]]; then
        error "error: no existing alias with name '$from_alias'"
    fi

    # check that the destination name isn't taken
    destination_directory=$(changename alias --get "$to_alias")
    if [[ ! -z "$destination_directory" ]]; then
        error "error: alias name '$to_alias' already in use by directory '$destination_directory'"
    fi

    delete_alias "$from_alias"
    create_alias "$to_alias" "$directory"
}

#
# Move an alias.
#
# $1: the old alias directory
# $2: the new alias directory
#
function move_alias
{
    from_directory="$1"
    to_directory="$2"

    if [[ -z "$from_directory" ]] || [[  -z "$to_directory" ]]; then
        error "usage: changename alias (-m|--move) <from> <to>"
    fi

    # check that the source directory is already aliased
    from_alias_name=$(changename alias --get "$from_directory")
    if [[ -z "$from_alias_name" ]]; then
        error "error: no existing alias for directory '$from_directory'"
    fi

    # check that the destination directory isn't already in use
    to_alias_name=$(changename alias --get "$to_directory")
    if [[ ! -z "$to_alias_name" ]]; then
        error "error: an alias already exists for directory '$to_directory'"
    fi

    delete_alias "$from_alias_name"
    create_alias "$from_alias_name" "$to_directory"
}

#
# Delete an alias.
#
# $1: the alias to delete
#
function delete_alias
{
    search="$1"

    # load existing aliases
    alias_definitions=$(cat "$ALIAS_FILE")
    IFS=$'\n' read -rd '' -a alias_definitions <<< "$alias_definitions"

    name_regex="^$search=.*$"
    directory_regex="^.*=$search$"

    line=1 # sed is 1 based
    for alias_definition in "${alias_definitions[@]}"; do
        if [[ "$alias_definition" =~ $name_regex ]] || [[ "$alias_definition" =~ $directory_regex ]]; then
            sed -i ".backup" "${line}d" "$ALIAS_FILE"
            rm -f "${ALIAS_FILE}.backup"
            return 0
        fi
        ((line++))
    done
}

#
# Determine which alias subcommand is being used: get_alias or create_alias.
#
function which_alias
{
    if [[ "$1" =~ ^(-g|--get)$ ]]; then
        get_alias "$2"
    elif [[ "$1" =~ ^(-r|--rename)$ ]]; then
        rename_alias "${@:2}"
    elif [[ "$1" =~ ^(-m|--move)$ ]]; then
        move_alias "${@:2}"
    else
        create_alias "$@"
    fi
}

#
# Name the terminal window according to the directory's alias.
#
function use_alias
{
    local directory="$PWD"

    # load existing aliases
    local alias_definitions=$(cat "$ALIAS_FILE")
    IFS=$'\n' read -rd '' -a alias_definitions <<< "$alias_definitions"

    local alias_definition=
    for alias_definition in "${alias_definitions[@]}"; do
        regex="^(.*)=$directory$"
        if [[ "$alias_definition" =~ $regex ]]; then
            name "${BASH_REMATCH[1]}"
        fi
    done

    error "error: no alias for directory '$PWD'"
}

new_name="$1"
while getopts ":rhda-:" opt; do
    case $opt in
        -)
            case "${OPTARG}" in
                directory)  new_name="${PWD##*/}";;
                reset)      new_name="";;
                use-alias)
                    use_alias
                    exit 0
                    ;;
                help)       help;;
                *)          error "Unimplemented option --${OPTARG}";;
            esac
            ;;
        d)  new_name="${PWD##*/}";;
        r)  new_name="";;
        a)
            use_alias
            exit 0
            ;;
        h)  help;;
        \?) error "Invalid option: -$OPTARG";;
        :)  error "Option -$OPTARG requires an argument.";;
        *)  error "Unimplemented option: -$OPTARG";;
    esac
done
OPTIND=1

if [[ "$1" =~ ^alias$ ]]; then
    which_alias "${@:2}"
elif [[ "$1" =~ ^unalias$ ]]; then
    delete_alias "${@:2}"
elif [[ "$1" =~ ^aliases$ ]]; then
    print_aliases
else
    name "$new_name"
fi
